[{"id": 1,
  "prompt": "Look for a HACK",
  "descriptions": ["Can you short-circuit a complex problem?",
                   "Probably you could build a hacky Page Rank without knowing anything at all about linear algebra",
                   "What kind of shortcuts did you look for when you were first learning to program?",
                   "Hacks often become excellent long-term solutions"
                  ]},

 {"id": 2,
  "prompt": "Look for a good enough approximation",
  "descriptions": ["Remove any inessential requirements you can find",
                   "Don't shy away from informal solutions like hacks and approximations if the formal solution is heavy work"]},

 {"id": 3,
  "prompt": "Have faith in sound-looking abstractions",
  "descriptions": ["Novel combinations of known high-level strategies almost always work",
                   "There's no guarantee to the newcomer that using regexes won't lead to an inescapable problem, and yet, with a little mortar, regexes work great."]},

 {"id": 4,
  "prompt": "Forget about optimizing your code",
  "descriptions": ["Most of the time unoptimized code is fine",
                   "If you can't break the habit of chasing optimizations, then leave a comment like POTENTIAL_OPTIMIZATION_POINT with a description of how to go about your optimization"]},

 {"id": 5,
  "prompt": "Solve the problem directly",
  "descriptions": ["Pierce right to the center",
                   "Avoid theory building"]},
 {"id": 6,
  "prompt": "Feats are fragile",
  "descriptions": ["How complicated is the solution you have? It is probably too fragile",
                   "The trickier a solution is, the smaller the pool of people able to maintain it"]},
 {"id": 7,
  "prompt": "Board up rabbit holes",
  "descriptions": ["Boarding over a rabbit hole always involves some sacrifice of functionality",
                   "Figure out what you cansacrifice and how much of it",
                   "It's cheap"]},
 {"id": 8,
  "prompt": "Build the theory of the problem",
  "descriptions": ["Simplify the problem in layers like an onion"]},

 {"id": 9,
  "prompt": "Shear off a layer",
  "descriptions": ["Many problems have separable layers."]},

 {"id": 10,
  "prompt": "Get red and green right before mixing yellow",
  "descriptions": ["If you have to combine two separates pieces into some bigger conglomeration, it can be tempting to build the entire thing",
                   "The reasoning, and it is naive reasoning, is that building everything together saves time",
                   "The 'now it'seasy' phenomenon is why mathematicians call everything they already know trivial"]},

 {"id": 11,
  "prompt": "Blink lasts 300 milliseconds",
  "descriptions": ["For most computing applications this is an eternity",
                   "Even the worst strategies will produce execution times orders of magnitude below the measurable perception limit"]},

 {"id": 12,
  "prompt": "Zoom in",
  "descriptions": ["If a tricky piece is causing issues, focus on it exclusively",
                   "Let it take up the whole frame"]},
 {"id": 13,
  "prompt": "Add constraints",
  "descriptions": ["Artificial limits turn exhausting problems into simple ones",
                   "A user may need five shipping addresses. They don't need one million"]},

 {"id": 14,
  "prompt": "Mark it WONTFIX",
  "descriptions": ["The best solution to any problem is to avoid having to solve it in the first place",
                   "This is one of your most important tools",
                   "All the work you cut is energy saved",
                   "Pure gain",
                   "Is is possible to just drop the task?",
                   "Will your world explode? If not, you probably can drop it"]}
]
